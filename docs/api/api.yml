openapi: 3.0.0
info:
  title: Watchlist API
  version: "1.0"
  description: >-
    Specification for apps that pretend consume Watchlist API

    ### About authentication

    Every endpoint listed below (except `auth/login` and `config`) must be invoked using
    http basic auth through a request header like `Authorization: Bearer <token>`.

    In order to get a valid token you must first make a request to the
    `auth/login` endpoint using a valid facebook token, you can get one
    for development at
    [https://developers.facebook.com/tools/explorer/](https://developers.facebook.com/tools/explorer/)
    and by clicking the `Generate token` button

    ### About localization

    There are some endpoints that accepts a `lang` query param in order to get
    responses with localized values for entities, use ISO-639 code for lang,
    eg: `?lang=es-MX`

    In case that requested language is not supported API will default to
    'en-US' language

servers:
- url: http:localhost:8081/api
  description: Development server

paths:
  /auth/login:
    post:
      tags:
      - Authorization
      summary: Authenticates/Registers a user
      description: >-
        Validates provided oauth token for indicated auth provider, then
        if there's no user with provided email, it will be registered as a new
        user. Finally a jwt and a user object will be returned as response

        NOTE: A "default" watchlist will be created during user's creation
      requestBody:
        description: User oauth credentials and data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Login request result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /config:
    get:
      tags:
        - Config
      summary: App config values
      description: >-
        Provides config values for consumption of external services
        such as TMDB and Youtube APIs
      responses:
        '200':
          description: App configuration values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'

  /user/{userId}/lists:
    get:
      tags:
      - Lists
      summary: Retrieves all the watchlists for specified user
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: An array with all user lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Watchlist'
        '403':
          description: Current user can not access indicated user lists
        '404':
          description: Given user id does not exists
    post:
      tags:
      - Lists
      summary: Creates a new list for user
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: |
          The watchlist to be created

          *Note: Watchlist id will be generated by server hence is not required
          as part of request body*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '200':
          description: The created watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watchlist'
        '400':
          description: |
            Posted entity thrown validation errors.

            Note: A single user can not have multiple lists with same name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
        '403':
          description: Unauthorized, current user can not modify indicated user lists
        '404':
          description: Given user id does not exists

  /lists/{listId}:
    get:
      tags:
      - List's content
      summary: Retrieves content of specified list
      parameters:
      - name: id
        in: path
        description: Watchlist id
        required: true
        schema:
          type: integer
          format: int32
      - name: lang
        in: query
        description: ISO-639 localization code for response
        required: false
        schema:
          $ref: '#/components/schemas/Lang'
      responses:
        '200':
          description: An array containing all items in list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WatchlistItem'
        '403':
          description: Unauthorized, current user can not access watchlist
        '404':
          description: Indicated watchlist does not exists

  /lists/{listId}/movies:
    post:
      tags:
      - List movies
      summary: Adds the specified movie to this list
      description: |
        Adds a movie to this list \
        NOTE: Movie details will be fetched from "The movie database"
        along with its crew, pictures and genres. That's why only basic info
        is required
      parameters:
        - name: id
          in: path
          description: List's id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistItemPost'
      responses:
        '200':
          description: >-
            The created 'watchlist item' object. You can use this
            to update the rendered watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedListItem'
        '403':
          description: Unauthorized, current user can not access watchlist
        '404':
          description: Indicated watchlist or movie does not exists
        '409':
          description: Conflict, provided movie id is already in this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{listId}/movies/{tmdb_id}:
    get:
      tags:
        - List movies
      summary: Gets all details about specific movie in watchlist
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
        - name: lang
          in: query
          description: ISO-639 code for preferred language
          required: false
          schema:
            $ref: '#/components/schemas/Lang'
      responses:
        '200':
          description: Required element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedListHasMovie'
        '403':
          description: Unauthorized to access element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists
    patch:
      tags:
      - List movies
      summary: Updates a specified watchlist's movie
      description: >-
        Updates the 'has movie' record in database.

        *Note: only `seen_at` field can be updated by now
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistItemPatch'
      responses:
        '204':
          description: Element was updated successfully
        '403':
          description: Unauthorized to update element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists
    delete:
      tags:
      - List movies
      summary: Removes specified movie from watchlist
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Element was deleted successfully
        '403':
          description: Unauthorized to remove element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists

  /lists/{listId}/tv:
    post:
      tags:
        - List's TV Shows
      summary: Adds the specified tv show to this list
      description: |
        Adds a tv show to this list \
        NOTE: TV Show details will be fetched from "The movie database"
        along with its crew, pictures and genres. That's why only basic info
        is required
      parameters:
        - name: id
          in: path
          description: List's id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistItemPost'
      responses:
        '200':
          description: >-
            The created 'watchlist item' object. You can use this
            to update the rendered watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedListItem'
        '403':
          description: Unauthorized, current user can not access watchlist
        '404':
          description: Indicated watchlist or tv show does not exists
        '409':
          description: Conflict, provided tv show id is already in this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{listId}/tv/{tmdb_id}:
    get:
      tags:
        - List's TV Shows
      summary: Gets all details about specific tv show in watchlist
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
        - name: lang
          in: query
          description: ISO-639 code for preferred language
          required: false
          schema:
            $ref: '#/components/schemas/Lang'
      responses:
        '200':
          description: Required element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedListHasTvShow'
        '403':
          description: Unauthorized to access element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists
    patch:
      tags:
        - List's TV Shows
      summary: Updates a specified watchlist's tv show
      description: >-
        Updates the 'has tv show record in database. \

        *Note: only `seen_at` field can be updated by now
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistItemPatch'
      responses:
        '204':
          description: Element was updated successfully
        '403':
          description: Unauthorized to update element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists
    delete:
      tags:
        - List's TV Shows
      summary: Removes specified tv show from watchlist
      parameters:
        - name: listId
          in: path
          description: Watchlist id
          required: true
          schema:
            type: integer
            format: int32
        - name: tmdbId
          in: path
          description: Tmdb id for requested item
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Element was deleted successfully
        '403':
          description: Unauthorized to remove element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists

components:
  schemas:
    Lang:
      type: string
      description: ISO-639 localization code
      example: es-MX
    Config:
      type: object
      properties:
        tmdb_api_key:
          type: string
          description: TMDB API Key
        yt_api_key:
          type: string
          description: Youtube API Key

    UserCredentials:
      type: object
      properties:
        name:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 1000
        picture:
          type: string
          maxLength: 5000
        token:
          type: string
          maxLength: 1000
        auth_provider_id:
          type: integer
          format: int32

    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 1000
        picture:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        jwt:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Watchlist:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 255
        is_default_list:
          type: boolean
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
        deleted:
          type: boolean

    LocalizedListItem:
      type: object
      properties:
        tmdb_id:
          type: integer
          format: int32
        lang:
          $ref: '#/components/schemas/Lang'
        title:
          type: string
        synopsis:
          type: string
        poster_path:
          type: string
        backdrop_path:
          type: string
        release_date:
          type: string
          format: date
        media_type: # 'movie' or 'tv'
          type: string
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'

    LocalizedListHasMovie:
      type: object
      properties:
        id:
          type: integer
          format: int32
        lang:
          $ref: '#/components/schemas/Lang'
        added_at:
          type: string
          format: date
        seen_at:
          type: string
          format: date
        added_by:
          $ref: '#/components/schemas/User'
        movie:
          $ref: '#/components/schemas/LocalizedMovie'

    LocalizedListHasTvShow:
      type: object
      properties:
        id:
          type: integer
          format: int32
        lang:
          $ref: '#/components/schemas/Lang'
        added_at:
          type: string
          format: date
        seen_at:
          type: string
          format: date
        added_by:
          $ref: '#/components/schemas/User'
        tv_show:
          $ref: '#/components/schemas/LocalizedTVShow'

    LocalizedMovie:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tmdb_id:
          type: integer
          format: int32
        title:
          type: string
        synopsis:
          type: string
        poster_path:
          type: string
        backdrop_path:
          type: string
        release_date:
          type: string
          format: date
        runtime:
          type: integer
          format: int32
        rating:
          type: number
        genres:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedGenre'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/Cast'
        crew:
          type: array
          items:
            $ref: '#/components/schemas/Crew'

    LocalizedTVShow:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tmdb_id:
          type: integer
          format: int32
        title:
          type: string
        synopsis:
          type: string
        poster_path:
          type: string
        backdrop_path:
          type: string
        first_air_date:
          type: string
          format: date
        rating:
          type: number
        genres:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedGenre'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/Cast'
        crew:
          type: array
          items:
            $ref: '#/components/schemas/Crew'

    Cast:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        character:
          type: string
        picture_url:
          type: string
          format: url

    Crew:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        job:
          type: string
        department:
          type: string
        picture_url:
          type: string
          format: url

    LocalizedGenre:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    WatchlistItemPost:
      type: object
      properties:
        tmdb_id:
          type: integer
          format: int32
        lang:
          $ref: '#/components/schemas/Lang'

    WatchlistItemPatch:
      type: object
      properties:
        seen_at:
          type: string
          format: date
          description: If null, item will be marked as unseen

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ValidationErrorsResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
